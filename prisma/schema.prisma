datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id            String   @id
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    username      String
    email         String   @unique
    plexId        Int      @unique
    plexAuthToken String
    thumb         String
    role          Role     @default(USER)

    authenticators Authenticator[]
    accounts       LinkedAccount[]
    scrobbleGroups ScrobbleGroup[]
    servers        Server[]
}

model Authenticator {
    id                  String      @id
    createdAt           DateTime    @default(now())
    updatedAt           DateTime    @updatedAt
    friendlyName        String
    AAGUID              String
    credentialID        Bytes       @unique
    credentialPublicKey Bytes
    counter             Int
    revoked             Boolean
    transports          Transport[]

    user   User   @relation(fields: [userId], references: [id])
    userId String
}

enum Transport {
    USB
    BLE
    NFC
    INTERNAL
    HYBRID
}

enum Role {
    USER
    ADMIN
}

model Server {
    id        String   @id
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    uuid      String   @unique
    secret    String   @unique
    name      String

    users            User[]
    scrobbleEpisodes ScrobbleEpisode[]
}

model ScrobbleGroup {
    id              String   @id
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    providerMediaId String

    user             User              @relation(fields: [userId], references: [id])
    userId           String
    scrobbleEpisodes ScrobbleEpisode[]

    @@unique([userId, providerMediaId])
}

model ScrobbleEpisode {
    id        String   @id
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    episode   Int

    scrobbleGroup   ScrobbleGroup            @relation(fields: [scrobbleGroupId], references: [id])
    scrobbleGroupId String
    server          Server                   @relation(fields: [serverId], references: [id])
    serverId        String
    accounts        LinkedAccount[]
    status          ScrobbleProviderStatus[]
}

model ScrobbleProviderStatus {
    id        String         @id
    createdAt DateTime       @default(now())
    updatedAt DateTime       @updatedAt
    status    ScrobbleStatus
    provider  Provider

    scrobbleEpisode   ScrobbleEpisode @relation(fields: [scrobbleEpisodeId], references: [id])
    scrobbleEpisodeId String
}

enum ScrobbleStatus {
    IGNORED
    TRACKED
    ERRORED
}

model LinkedAccount {
    id                 String    @id
    createdAt          DateTime  @default(now())
    updatedAt          DateTime  @updatedAt
    provider           Provider
    accountId          String    @unique
    accessToken        String
    accessTokenExpires DateTime?
    refreshToken       String?

    user             User              @relation(fields: [userId], references: [id])
    userId           String
    scrobbleEpisodes ScrobbleEpisode[]
}

enum Provider {
    ANILIST
    KITSU
}
