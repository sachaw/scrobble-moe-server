datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id                               String    @id @default(cuid())
    createdAt                        DateTime  @default(now())
    updatedAt                        DateTime  @updatedAt
    username                         String
    email                            String    @unique
    plexId                           Int       @unique
    plexAuthToken                    String
    thumb                            String
    authenticationChallenge          String?
    authenticationChallengeExpiresAt DateTime?
    role                             Role      @default(USER)

    authenticators      Authenticator[]
    accounts            LinkedAccount[]
    tokens              Token[]
    scrobbles           Scrobble[]
    servers             Server[]
    torrentClients      TorrentClient[]
    seriesSubscriptions SeriesSubscription[]
}

model Authenticator {
    id                  String      @id @default(cuid())
    createdAt           DateTime    @default(now())
    updatedAt           DateTime    @updatedAt
    AAGUID              String
    credentialID        Bytes       @unique
    credentialPublicKey Bytes
    counter             Int
    revoked             Boolean
    transports          Transport[]

    user   User?   @relation(fields: [userId], references: [id])
    userId String?
}

enum Transport {
    USB
    BLE
    NFC
    INTERNAL
}

enum Role {
    USER
    ADMIN
}

model Token {
    id          String    @id @default(cuid())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    hashedToken String
    expiresAt   DateTime
    type        TokenType

    user   User   @relation(fields: [userId], references: [id])
    userId String

    @@unique([hashedToken])
}

enum TokenType {
    ACCESS
    REFRESH
}

model Server {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    uuid      String   @unique
    secret    String   @unique
    name      String

    users     User[]
    scrobbles Scrobble[]
}

model Scrobble {
    id              String   @id @default(cuid())
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    providerMediaId String
    episode         Int

    user     User                     @relation(fields: [userId], references: [id])
    userId   String
    server   Server                   @relation(fields: [serverId], references: [id])
    serverId String
    accounts LinkedAccount[]
    status   ScrobbleProviderStatus[]
}

model ScrobbleProviderStatus {
    id        String         @id @default(cuid())
    createdAt DateTime       @default(now())
    updatedAt DateTime       @updatedAt
    status    ScrobbleStatus
    provider  Provider

    scrobble   Scrobble @relation(fields: [scrobbleId], references: [id])
    scrobbleId String
}

enum ScrobbleStatus {
    IGNORED
    TRACKED
    ERRORED
}

model LinkedAccount {
    id                 String    @id @default(cuid())
    createdAt          DateTime  @default(now())
    updatedAt          DateTime  @updatedAt
    provider           Provider
    accountId          String    @unique
    accessToken        String
    accessTokenExpires DateTime?
    refreshToken       String?

    scrobbles Scrobble[]
    user      User       @relation(fields: [userId], references: [id])
    userId    String
}

enum Provider {
    ANILIST
    KITSU
}

model Encoder {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String   @unique
    rssURL    String

    userSubscriptions SeriesSubscription[]
}

model TorrentClient {
    id             String   @id @default(cuid())
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
    clientUrl      String
    clientUsername String
    clientPassword String

    client TorrentClientApplication
    user   User                     @relation(fields: [userId], references: [id])
    userId String
}

enum TorrentClientApplication {
    DELUGE
    RTORRENT
    QBITTORRENT
    UTORRENT
}

model SeriesSubscription {
    id              String   @id @default(cuid())
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    nameIncludes    String
    nameExcludes    String[]
    providerMediaId String

    user      User    @relation(fields: [userId], references: [id])
    userId    String
    encoder   Encoder @relation(fields: [encoderId], references: [id])
    encoderId String

}
