// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file moe/scrobble/models/v1/models.proto (package moe.scrobble.models.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum moe.scrobble.models.v1.Role
 */
export enum Role {
  /**
   * @generated from enum value: USER = 0;
   */
  USER = 0,

  /**
   * @generated from enum value: ADMIN = 1;
   */
  ADMIN = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(Role)
proto3.util.setEnumType(Role, "moe.scrobble.models.v1.Role", [
  { no: 0, name: "USER" },
  { no: 1, name: "ADMIN" },
]);

/**
 * @generated from enum moe.scrobble.models.v1.Transport
 */
export enum Transport {
  /**
   * @generated from enum value: USB = 0;
   */
  USB = 0,

  /**
   * @generated from enum value: BLE = 1;
   */
  BLE = 1,

  /**
   * @generated from enum value: NFC = 2;
   */
  NFC = 2,

  /**
   * @generated from enum value: INTERNAL = 3;
   */
  INTERNAL = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(Transport)
proto3.util.setEnumType(Transport, "moe.scrobble.models.v1.Transport", [
  { no: 0, name: "USB" },
  { no: 1, name: "BLE" },
  { no: 2, name: "NFC" },
  { no: 3, name: "INTERNAL" },
]);

/**
 * @generated from enum moe.scrobble.models.v1.TokenType
 */
export enum TokenType {
  /**
   * @generated from enum value: ACCESS = 0;
   */
  ACCESS = 0,

  /**
   * @generated from enum value: REFRESH = 1;
   */
  REFRESH = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(TokenType)
proto3.util.setEnumType(TokenType, "moe.scrobble.models.v1.TokenType", [
  { no: 0, name: "ACCESS" },
  { no: 1, name: "REFRESH" },
]);

/**
 * @generated from message moe.scrobble.models.v1.GetUserRequest
 */
export class GetUserRequest extends Message<GetUserRequest> {
  /**
   * @generated from field: optional string id = 1;
   */
  id?: string;

  /**
   * @generated from field: optional string email = 3;
   */
  email?: string;

  /**
   * @generated from field: optional int32 plex_id = 4;
   */
  plexId?: number;

  constructor(data?: PartialMessage<GetUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "moe.scrobble.models.v1.GetUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "plex_id", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserRequest {
    return new GetUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserRequest {
    return new GetUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserRequest {
    return new GetUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserRequest | PlainMessage<GetUserRequest> | undefined, b: GetUserRequest | PlainMessage<GetUserRequest> | undefined): boolean {
    return proto3.util.equals(GetUserRequest, a, b);
  }
}

/**
 * @generated from message moe.scrobble.models.v1.GetUserResponse
 */
export class GetUserResponse extends Message<GetUserResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string username = 4;
   */
  username = "";

  /**
   * @generated from field: string email = 5;
   */
  email = "";

  /**
   * @generated from field: int32 plex_id = 6;
   */
  plexId = 0;

  /**
   * @generated from field: string thumb = 8;
   */
  thumb = "";

  /**
   * @generated from field: moe.scrobble.models.v1.Role role = 12;
   */
  role = Role.USER;

  /**
   * @generated from field: repeated moe.scrobble.models.v1.Authenticator authenticators = 13;
   */
  authenticators: Authenticator[] = [];

  /**
   * @generated from field: repeated moe.scrobble.models.v1.Token tokens = 15;
   */
  tokens: Token[] = [];

  constructor(data?: PartialMessage<GetUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "moe.scrobble.models.v1.GetUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "plex_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "thumb", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "role", kind: "enum", T: proto3.getEnumType(Role) },
    { no: 13, name: "authenticators", kind: "message", T: Authenticator, repeated: true },
    { no: 15, name: "tokens", kind: "message", T: Token, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserResponse {
    return new GetUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserResponse {
    return new GetUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserResponse {
    return new GetUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserResponse | PlainMessage<GetUserResponse> | undefined, b: GetUserResponse | PlainMessage<GetUserResponse> | undefined): boolean {
    return proto3.util.equals(GetUserResponse, a, b);
  }
}

/**
 * @generated from message moe.scrobble.models.v1.GetUsersRequest
 */
export class GetUsersRequest extends Message<GetUsersRequest> {
  constructor(data?: PartialMessage<GetUsersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "moe.scrobble.models.v1.GetUsersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUsersRequest {
    return new GetUsersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUsersRequest {
    return new GetUsersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUsersRequest {
    return new GetUsersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUsersRequest | PlainMessage<GetUsersRequest> | undefined, b: GetUsersRequest | PlainMessage<GetUsersRequest> | undefined): boolean {
    return proto3.util.equals(GetUsersRequest, a, b);
  }
}

/**
 * @generated from message moe.scrobble.models.v1.GetUsersResponse
 */
export class GetUsersResponse extends Message<GetUsersResponse> {
  /**
   * @generated from field: repeated moe.scrobble.models.v1.GetUserResponse users = 1;
   */
  users: GetUserResponse[] = [];

  constructor(data?: PartialMessage<GetUsersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "moe.scrobble.models.v1.GetUsersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "users", kind: "message", T: GetUserResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUsersResponse {
    return new GetUsersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUsersResponse {
    return new GetUsersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUsersResponse {
    return new GetUsersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUsersResponse | PlainMessage<GetUsersResponse> | undefined, b: GetUsersResponse | PlainMessage<GetUsersResponse> | undefined): boolean {
    return proto3.util.equals(GetUsersResponse, a, b);
  }
}

/**
 * @generated from message moe.scrobble.models.v1.Authenticator
 */
export class Authenticator extends Message<Authenticator> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string aaguid = 2;
   */
  aaguid = "";

  /**
   * @generated from field: bytes credential_id = 3;
   */
  credentialId = new Uint8Array(0);

  /**
   * @generated from field: bytes credential_public_key = 4;
   */
  credentialPublicKey = new Uint8Array(0);

  /**
   * @generated from field: int32 counter = 5;
   */
  counter = 0;

  /**
   * @generated from field: bool revoked = 6;
   */
  revoked = false;

  /**
   * @generated from field: repeated moe.scrobble.models.v1.Transport transports = 7;
   */
  transports: Transport[] = [];

  constructor(data?: PartialMessage<Authenticator>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "moe.scrobble.models.v1.Authenticator";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "aaguid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "credential_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "credential_public_key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "counter", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "revoked", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "transports", kind: "enum", T: proto3.getEnumType(Transport), repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Authenticator {
    return new Authenticator().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Authenticator {
    return new Authenticator().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Authenticator {
    return new Authenticator().fromJsonString(jsonString, options);
  }

  static equals(a: Authenticator | PlainMessage<Authenticator> | undefined, b: Authenticator | PlainMessage<Authenticator> | undefined): boolean {
    return proto3.util.equals(Authenticator, a, b);
  }
}

/**
 * @generated from message moe.scrobble.models.v1.Token
 */
export class Token extends Message<Token> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: uint32 created_at = 2;
   */
  createdAt = 0;

  /**
   * @generated from field: uint32 updated_at = 3;
   */
  updatedAt = 0;

  /**
   * @generated from field: string hashed_token = 4;
   */
  hashedToken = "";

  /**
   * @generated from field: uint32 expires_at = 5;
   */
  expiresAt = 0;

  /**
   * @generated from field: moe.scrobble.models.v1.TokenType type = 6;
   */
  type = TokenType.ACCESS;

  constructor(data?: PartialMessage<Token>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "moe.scrobble.models.v1.Token";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "created_at", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "updated_at", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "hashed_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "expires_at", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 6, name: "type", kind: "enum", T: proto3.getEnumType(TokenType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Token {
    return new Token().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Token {
    return new Token().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Token {
    return new Token().fromJsonString(jsonString, options);
  }

  static equals(a: Token | PlainMessage<Token> | undefined, b: Token | PlainMessage<Token> | undefined): boolean {
    return proto3.util.equals(Token, a, b);
  }
}

