// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file moe/scrobble/feed/v1/feed.proto (package moe.scrobble.feed.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message moe.scrobble.feed.v1.ScrobbleFeedRequest
 */
export class ScrobbleFeedRequest extends Message<ScrobbleFeedRequest> {
  constructor(data?: PartialMessage<ScrobbleFeedRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "moe.scrobble.feed.v1.ScrobbleFeedRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScrobbleFeedRequest {
    return new ScrobbleFeedRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScrobbleFeedRequest {
    return new ScrobbleFeedRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScrobbleFeedRequest {
    return new ScrobbleFeedRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ScrobbleFeedRequest | PlainMessage<ScrobbleFeedRequest> | undefined, b: ScrobbleFeedRequest | PlainMessage<ScrobbleFeedRequest> | undefined): boolean {
    return proto3.util.equals(ScrobbleFeedRequest, a, b);
  }
}

/**
 * @generated from message moe.scrobble.feed.v1.ScrobbleFeedResponse
 */
export class ScrobbleFeedResponse extends Message<ScrobbleFeedResponse> {
  /**
   * @generated from field: string data = 1;
   */
  data = "";

  constructor(data?: PartialMessage<ScrobbleFeedResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "moe.scrobble.feed.v1.ScrobbleFeedResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScrobbleFeedResponse {
    return new ScrobbleFeedResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScrobbleFeedResponse {
    return new ScrobbleFeedResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScrobbleFeedResponse {
    return new ScrobbleFeedResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ScrobbleFeedResponse | PlainMessage<ScrobbleFeedResponse> | undefined, b: ScrobbleFeedResponse | PlainMessage<ScrobbleFeedResponse> | undefined): boolean {
    return proto3.util.equals(ScrobbleFeedResponse, a, b);
  }
}

