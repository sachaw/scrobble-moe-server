// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file moe/scrobble/auth/v1/auth.proto (package moe.scrobble.auth.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message moe.scrobble.auth.v1.PlexAuthRequest
 */
export class PlexAuthRequest extends Message<PlexAuthRequest> {
  /**
   * @generated from field: string plex_token = 1;
   */
  plexToken = "";

  constructor(data?: PartialMessage<PlexAuthRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "moe.scrobble.auth.v1.PlexAuthRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "plex_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlexAuthRequest {
    return new PlexAuthRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlexAuthRequest {
    return new PlexAuthRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlexAuthRequest {
    return new PlexAuthRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PlexAuthRequest | PlainMessage<PlexAuthRequest> | undefined, b: PlexAuthRequest | PlainMessage<PlexAuthRequest> | undefined): boolean {
    return proto3.util.equals(PlexAuthRequest, a, b);
  }
}

/**
 * @generated from message moe.scrobble.auth.v1.PlexAuthResponse
 */
export class PlexAuthResponse extends Message<PlexAuthResponse> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * @generated from field: string avatar_url = 2;
   */
  avatarUrl = "";

  /**
   * @generated from oneof moe.scrobble.auth.v1.PlexAuthResponse.webauthn_options
   */
  webauthnOptions: {
    /**
     * @generated from field: string create = 3;
     */
    value: string;
    case: "create";
  } | {
    /**
     * @generated from field: string request = 4;
     */
    value: string;
    case: "request";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<PlexAuthResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "moe.scrobble.auth.v1.PlexAuthResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "avatar_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "create", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "webauthn_options" },
    { no: 4, name: "request", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "webauthn_options" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlexAuthResponse {
    return new PlexAuthResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlexAuthResponse {
    return new PlexAuthResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlexAuthResponse {
    return new PlexAuthResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PlexAuthResponse | PlainMessage<PlexAuthResponse> | undefined, b: PlexAuthResponse | PlainMessage<PlexAuthResponse> | undefined): boolean {
    return proto3.util.equals(PlexAuthResponse, a, b);
  }
}

/**
 * @generated from message moe.scrobble.auth.v1.WebAuthnRequest
 */
export class WebAuthnRequest extends Message<WebAuthnRequest> {
  /**
   * @generated from field: string plex_token = 1;
   */
  plexToken = "";

  /**
   * @generated from field: string verification = 2;
   */
  verification = "";

  constructor(data?: PartialMessage<WebAuthnRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "moe.scrobble.auth.v1.WebAuthnRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "plex_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "verification", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WebAuthnRequest {
    return new WebAuthnRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WebAuthnRequest {
    return new WebAuthnRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WebAuthnRequest {
    return new WebAuthnRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WebAuthnRequest | PlainMessage<WebAuthnRequest> | undefined, b: WebAuthnRequest | PlainMessage<WebAuthnRequest> | undefined): boolean {
    return proto3.util.equals(WebAuthnRequest, a, b);
  }
}

/**
 * @generated from message moe.scrobble.auth.v1.WebAuthnResponse
 */
export class WebAuthnResponse extends Message<WebAuthnResponse> {
  constructor(data?: PartialMessage<WebAuthnResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "moe.scrobble.auth.v1.WebAuthnResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WebAuthnResponse {
    return new WebAuthnResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WebAuthnResponse {
    return new WebAuthnResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WebAuthnResponse {
    return new WebAuthnResponse().fromJsonString(jsonString, options);
  }

  static equals(a: WebAuthnResponse | PlainMessage<WebAuthnResponse> | undefined, b: WebAuthnResponse | PlainMessage<WebAuthnResponse> | undefined): boolean {
    return proto3.util.equals(WebAuthnResponse, a, b);
  }
}

